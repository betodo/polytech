/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2019-07-15 05:18:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import vote_project.connectDB;

public final class vote_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("vote_project.connectDB");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>투표</title>\r\n");
      out.write("\t");

		//db연결
		connectDB cdb = new connectDB();
		Statement stmt = cdb.useDB();
		
		//select box출력 준비
		String QueryTxt;
		QueryTxt = "select * from candidate;";
		ResultSet rset = stmt.executeQuery(QueryTxt);
	
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t//널값 제외 함수\r\n");
      out.write("\t    function limitNull() {\r\n");
      out.write("\t        const insert = document.getElementById('insert');//form을 받아옴\r\n");
      out.write("\t        const inputName = document.getElementById('name');//인풋타입텍스트들을 받아옴\r\n");
      out.write("\t        const inputAge = document.getElementById('age');//인풋타입텍스트들을 받아옴\r\n");
      out.write("\t      \r\n");
      out.write("\t        if(inputName.value ==\"\" || inputAge.value==\"\"){\r\n");
      out.write("\t            alert(\"입력값이 없는지 확인 해 보세요\");\r\n");
      out.write("\t            return;\r\n");
      out.write("\t        }\r\n");
      out.write("\t\r\n");
      out.write("\t        insert.submit(); \r\n");
      out.write("\t    }\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3 style=\"margin-left: 2em\">투표</h3>\t\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<form method=\"post\" action=\"?contentPage=voteResult.jsp\" id=\"insert\">\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<!-- 폼에 셀렉트 태그를 씌어서 셀렉트 박스를 만든다. -->\r\n");
      out.write("\t\t\t\t\t<select name =toVote id=name>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"\">후보자 선택</option>\r\n");
      out.write("\t\t\t\t\t\t");
 while(rset.next()){ 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<option value=\"");
      out.print(rset.getInt(1) );
      out.write('"');
      out.write('>');
      out.print(rset.getInt(1) );
      out.write("번 : ");
      out.print(rset.getString(2) );
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<select name=\"toAge\" id=age>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"\">투표자 연령 선택</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"1\">10대</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"2\">20대</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"3\">30대</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"4\">40대</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"5\">50대</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"6\">60대</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"7\">70대</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"8\">80대</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"9\">90대</option>\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<!-- 버튼에 클릭이벤트리스너를 만들어서 값보내기 -->\r\n");
      out.write("\t\t\t\t<td><input type=\"button\" value=\"투표하기\" onclick=\"limitNull()\"></td>\r\n");
      out.write("\t\t\t</form>\t\t\t \r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t");

		rset.close();
	    stmt.close();
	    cdb.close();
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
