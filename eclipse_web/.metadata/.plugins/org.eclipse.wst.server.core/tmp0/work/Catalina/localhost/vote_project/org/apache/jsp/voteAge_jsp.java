/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2019-07-15 04:51:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import vote_project.connectDB;

public final class voteAge_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("vote_project.connectDB");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>개표결과-성향분석</title>\r\n");
      out.write("\r\n");
      out.write(" \t<style>\r\n");
      out.write("\t\tdiv {\r\n");
      out.write("\t\t\tdisplay: inline-block;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</style>\r\n");
      out.write("\t\r\n");
      out.write("\t");

		int id =0;
		int totalVoter =0;//전체투표자
		//배열의 크기가 10인 이유는 i를 1부터 세면 편하기 때문
		//배열로 각 투표자의 득표율 득표수 저장
		double ageRate[] = new double[10];//각연령대 득표율 //초기화값=0
		int ageCnt[] =new int[10]; //각연령대 투표수
		
		//받아서 출력할 변수(후보이름)
		String name ="";
		
		//db연결
		connectDB cdb = new connectDB();
		Statement stmt = cdb.useDB();
		String QueryTxt;
		//값받기
		String idTemp = request.getParameter("toId");
		id= Integer.parseInt(idTemp);
		
		//후보자 한명의 투표자 연령 조회 쿼리
		QueryTxt = "SELECT COUNT(vote_id) FROM ballot WHERE vote_id="+id+";";
		ResultSet rset = stmt.executeQuery(QueryTxt);
		rset.next();
	
		//전체 투표자
		totalVoter=rset.getInt(1);
		
		QueryTxt = "SELECT b.vote_id, b.age, COUNT(b.age),c.name"+ 
				" FROM ballot b JOIN candidate c ON b.vote_id = c.id"+
				" where vote_id="+id+" GROUP BY b.age;";
		
		rset = stmt.executeQuery(QueryTxt);
		

		while(rset.next()){ //투표자 한명의 득표율 구하기
			ageCnt[rset.getInt(2)] = rset.getInt(3);
			name = rset.getString(4);
			ageRate[rset.getInt(2)] = (rset.getInt(3)/(double)totalVoter)*100;
			ageRate[rset.getInt(2)] = Math.round(ageRate[rset.getInt(2)]*100)/100.0;//소수점 둘째 자리끊기
			
		}

	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3 style=\"margin-left: 2em\">개표결과 성향분석</h3>\t\r\n");
      out.write("<h2>기호 ");
      out.print(id );
      out.write("번 , ");
      out.print(name );
      out.write(" 후보 득표성향 분석</h2>\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t");
 for(int i=1; i<10; i++){ 
      out.write("\t\t\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(i );
      out.write("0대</td>\r\n");
      out.write("\t\t\t\t<td><div style=\"width:100vh ;height:1em\"><div style=\"width:");
      out.print(ageRate[i]);
      out.write("vh ;height:1em ;background-color: #ff0000\"></div><span>");
      out.print(ageCnt[i] );
      out.write('표');
      out.write(' ');
      out.write('(');
      out.print(ageRate[i] );
      out.write("%)</span></div></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\t");

		rset.close();
	    stmt.close();
	    cdb.close();
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
