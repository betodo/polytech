/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2019-08-11 09:17:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.net.URLEncoder;
import java.net.URLDecoder;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	/* String loginOK = null;
	String jumpURL = "login.jsp?jump=index.jsp";
	loginOK = (String) session.getAttribute("login_ok"); */
	
	
	///////////////////////////////////////////////////////////

	// 넘어오는 값 받아서 div에 배치할 것 지정하기
	String contentPage = request.getParameter("contentPage");

	//마지막 방문일 인덱스에서만 출력하도록 boolean 변수
	boolean lastDatePrint = false; // fasle면 출력 안함
	if (contentPage == null) {
		//최초접속 위해
		contentPage = "main.jsp";
		lastDatePrint = true; //최초 인덱스 접속 시에만 마지막 방문시각 출력
	}

	//최근 방문시간 기록(쿠키저장처리)

	// 마지막 방문일을 저장하고 있는 쿠키를 저장할 객체
	Cookie lastDate = null;

	// 화면에 출력할 메시지를 저장할 문자열 변수
	String msg = "";

	// 마지막 방문일을 저장하고 있는 쿠키가 존재하는지를 판별할 변수
	boolean bln_cookie = false;

	//현재시간을 저장
	Calendar cal = Calendar.getInstance();
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 HH시 mm분 ss초");
	//out.print(sdf.format(cal.getTime()));

	String curTime = URLEncoder.encode(sdf.format(cal.getTime()), "UTF-8");

	// 쿠키를 얻는다.
	Cookie[] cookies = request.getCookies();

	// 마지막 방문 일을 정하고 있는 쿠키를 검색
	if (cookies != null) {

		for (int i = 0; i < cookies.length; i++) {

			lastDate = cookies[i];

			// 			out.print("울랄라");
			// 			out.print(lastDate.getName() + "<br>");
			// 			out.print(lastDate.getValue() + "<br>");

			if (lastDate.getName().equals("lastdateCookie")) {

				bln_cookie = true;
				break;
			}
		}
	}

	// 처음 방문일 경우 새 쿠키 생성
	if (!bln_cookie) { // if (bln_cookie = false)

		msg = "처음 방문 입니다.";

		// 쿠키 객체를 생성
		lastDate = new Cookie("lastdateCookie", curTime);

		// 쿠키 속성값을 설정
		lastDate.setMaxAge(365 * 24 * 60 * 60); // 365일
		lastDate.setPath("/");

		// 쿠키를 추가
		response.addCookie(lastDate);

		// 		out.print("야호");
		// 		out.print(lastDate.getName() + "<br>");
		// 		out.print(lastDate.getValue() + "<br>");

	}

	else { // 이미 방문한 적이 있는 클라이언트라면

		msg = "최근 방문일은 " + URLDecoder.decode(lastDate.getValue(), "UTF-8") + "입니다.";

		// 쿠키에 새 값을 추가
		lastDate.setValue(curTime);
		lastDate.setMaxAge(365 * 24 * 60 * 60);
		// 쿠키를 추가
		response.addCookie(lastDate);

	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>인덱스</title>\r\n");
      out.write("\r\n");
      out.write("<!-- 부트 스트랩 사용 링크(헤드에 있어야함) -->\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\r\n");
      out.write("\tintegrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\r\n");
      out.write("\tcrossorigin=\"anonymous\">\r\n");
      out.write("\r\n");
      out.write("<!-- include libraries(jQuery, bootstrap) -->\r\n");
      out.write("<link\r\n");
      out.write("\thref=\"http://netdna.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.css\"\r\n");
      out.write("\trel=\"stylesheet\">\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"http://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js\"></script>\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"http://netdna.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- include summernote css/js  섬머노트 사용 링크-->\r\n");
      out.write("<link\r\n");
      out.write("\thref=\"http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.12/summernote.css\"\r\n");
      out.write("\trel=\"stylesheet\">\r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"http://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.12/summernote.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("/* 여러 페이지에서 사용되는 스타일들 동시 적용 하려고 css파일 임포트 */\r\n");
      out.write("@import url(CSS/Basic_table.css);\r\n");
      out.write("\r\n");
      out.write("@import url(CSS/Pagination.css);\r\n");
      out.write("/* @import url(‘mystyle.css’); 로 해도 됨 */\r\n");
      out.write("/* @import “mystyle.css”;로 해도 됨 */\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 프레임을 나누는 역할 -->\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("/* 가운데 정렬을 위한 스타일 적용 */\r\n");
      out.write("#wrapp {\r\n");
      out.write("\theight: 100vh;\r\n");
      out.write("\tdisplay: flex; /* 디스플레이를 플렉스로 준다 */\r\n");
      out.write("\tflex-direction: column; /* 위아래로 나뉘도록 */\r\n");
      out.write("\t/* align:center; */\r\n");
      out.write("\t/* justify-content: center; 두개다 있으면 한가운데 정렬 */\r\n");
      out.write("\t/* align-items: center; */\r\n");
      out.write("}\r\n");
      out.write("#menuu {\r\n");
      out.write("\t/*   \t\t\tline-height:10vh; */\r\n");
      out.write("\t/* \t\t\tvertical-align: center; */\r\n");
      out.write("\t/* \t\t\tjustify-content: center; */\r\n");
      out.write("\t/*   \t\t\theight: 10vh;   */\r\n");
      out.write("}\r\n");
      out.write("#mainn {\r\n");
      out.write("\t/* \tdisplay: flex; */\r\n");
      out.write("\t/*  \t\t\tjustify-content: center;  */\r\n");
      out.write("\t/*  \t\t\talign-items: center;  */\r\n");
      out.write("\t/*    \t\t\theight: 100vh;      */\r\n");
      out.write("\t/*  \t\t\toverflow: auto;   */\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#title {\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#tdContent {\r\n");
      out.write("\twidth: 90%;\r\n");
      out.write("\theight: 35vh;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".rsv_input {\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".rsv_td {\r\n");
      out.write("\twidth: 20%;\r\n");
      out.write("}\r\n");
      out.write("address{\r\n");
      out.write("\tfont-style: italic;\r\n");
      out.write("\tpadding-left: 2em;\r\n");
      out.write("    color: ghostwhite;\r\n");
      out.write("    background-color: black;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"wrapp\">\r\n");
      out.write("\t\t<header id=\"menuu\">\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "menu2.jsp", out, false);
      out.write(" <!-- 상단 메뉴바 -->\r\n");
      out.write("\t\t</header>\r\n");
      out.write("\t\t<br> <br> \r\n");
      out.write("\t\t<div id=\"mainn\">\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, contentPage, out, false);
      out.write(" <!-- 화면전환 -->\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<br> <br>\r\n");
      out.write("\t\t<footer>\r\n");
      out.write("\t\t\t<!--마지막 방문일 표시 일단 display none으로 해주고 js함수로 조건에 맞게 표시  -->\r\n");
      out.write("\t\t\t<h3 id=\"lastDateCookie\" align=center style='display: none;'>");
      out.print(msg);
      out.write("</h3>\r\n");
      out.write("\t\t\t<!-- 모든 페이지에 적용되는 하단 주소정보 -->\r\n");
      out.write("\t\t\t<address>경기도 성남시 분당구 황새울로329번길 5 (서현동, 한국폴리텍대학 융합기술교육원)<br>\r\n");
      out.write("\t\t\t5, Hwangsaeul-ro 329beon-gil, Bundang-gu, Seongnam-si, Gyeonggi-do, Republic of Korea<br>\r\n");
      out.write("\t\t\tP: (123) 456-7890\r\n");
      out.write("\t\t\t</address>\r\n");
      out.write("\t\t</footer>\r\n");
      out.write("\t</div>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t//최근 방문일표시가 true면 display none을 지워서 표시해줌\r\n");
      out.write("\tvar lastDatePrint = ");
      out.print(lastDatePrint);
      out.write("\r\n");
      out.write("\tvar obj = document.getElementById(\"lastDateCookie\")\r\n");
      out.write("\tif (lastDatePrint) {\r\n");
      out.write("\t\tobj.style.display = '';\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\t<!-- 부트스트랩 사용에 필요한 코드 바디 마지막에 필요 -->\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\r\n");
      out.write("\t\tintegrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\r\n");
      out.write("\t\tcrossorigin=\"anonymous\"></script>\r\n");
      out.write("\t<script\r\n");
      out.write("\t\tsrc=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\r\n");
      out.write("\t\tintegrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\r\n");
      out.write("\t\tcrossorigin=\"anonymous\"></script>\r\n");
      out.write("\t<script\r\n");
      out.write("\t\tsrc=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\r\n");
      out.write("\t\tintegrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\r\n");
      out.write("\t\tcrossorigin=\"anonymous\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
