/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2019-07-25 02:05:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import GongJi.UseDB;
import java.io.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;

public final class gongji_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("GongJi.UseDB");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>처음 글 목록을 보여주는 화면</title>\r\n");
      out.write("\t<style type=\"text/css\">\r\n");
      out.write("\t\t/* 가운데 정렬과 테이블 꾸미기 위한 스타일 지정 */\r\n");
      out.write("\t\t#wrap {\r\n");
      out.write("\t\t\tdisplay: flex;\r\n");
      out.write("\t\t\t/* justify-content: center; */\r\n");
      out.write("\t\t\talign-items: center;  \r\n");
      out.write("\t\t}\r\n");
      out.write("\t\ttable{\r\n");
      out.write("\t\t\tborder-collapse: collapse;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\ttr {\r\n");
      out.write("\t\t\theight:3em;\r\n");
      out.write("\t\t\tborder-bottom:1px solid;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t.collum1  {\r\n");
      out.write("\t\t\twidth:50px;\r\n");
      out.write("\t\t\ttext-align:center;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t.collum4  {\r\n");
      out.write("\t\t\twidth:70px;\r\n");
      out.write("\t\t\ttext-align:center;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t.collum2 {\r\n");
      out.write("\t\t\ttext-align:left;\r\n");
      out.write("\t\t\tpadding-left:2em;\r\n");
      out.write("\t\t\twidth:600px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t.collum2 {\r\n");
      out.write("\t\t\twidth:350px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t#divButton{\r\n");
      out.write("\t\t    width: 550px;\r\n");
      out.write("    \t\ttext-align: right;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\ta {\r\n");
      out.write("\t\t\ttext-decoration: none;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\ta:hover {\r\n");
      out.write("\t\t\ttext-decoration: underline;\r\n");
      out.write("            background: lightgray;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</style>\r\n");
      out.write("\t");

		SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd");
		Calendar calt = Calendar.getInstance();
		
		String title ="";
		
// 		디비를 연결하고 쿼리를 날릴 클래스를 하나 파서 메서드를 만듬
		UseDB udb = new UseDB();
		Statement stmt =null;
		ResultSet rset =null;
		// 첫화면은 클래스에 쿼리날리는 메서드를 만들지 않고 여기서 직접했다
		String sql="";
		//try{
			stmt = udb.statementDB();
			sql = "select id, title, date, recnt, viewcnt, relevel from gongji order by rootid desc, recnt asc;";
			rset = stmt.executeQuery(sql);
			
			//페이징 처리
			//선언
		    //테이블 라인 조회 변수
		    int LineCnt = 0; //행 번호
		    int fromNum =0; //몇번부터
		    int toCnt = 10; //몇개를
		    String fromTemp;//던지는 값을 일시적으로 받을 변수
		
		    //페이징 처리 변수
		    final int firstPage_firstLinkNum=1; //제일 첫p의 첫 링크 번호
		    int firstLinkNum = 1;//각 p의 첫 링크 번호
		    int stopLink = 3;
		    int totalLineCnt = 0;//데이터의 전체 라인 수(마지막 P 구현에 필요)
		    int previousPage_firstLinkNum = 0;//이전 p 갈 때 필요 변수
		    int nextPage_firstLinkNum = 0;//다음 p 갈 때 필요 변수
		    int lastPage_firstLinkNum = 0;//막p 첫 링크 번호
		    int finishLink = 0; //최종 마지막 링크
		
		    //값 받기
		    fromTemp =request.getParameter("from"); 
		
		    //최초 받은 값이 없고 있고 처리
		    if(fromTemp == null) {
		        fromNum =1; //제일 처음
		    }else { 
		        fromNum = Integer.parseInt(fromTemp);
		
		    }
		
		    //데이터 전체라인 구하기
		    rset.last();
		    totalLineCnt=rset.getRow();
		    rset.beforeFirst();
		
		    //하이퍼링크가 던지는 값(각 페이지의 첫번째 링크 숫자) 받기
		    String getFirstLink = request.getParameter("sendFirstLink");
		    if (getFirstLink != null){
		        firstLinkNum = Integer.parseInt(getFirstLink);
		    }
		    
		    //마지막p 첫 링크 번호 구하기 (총라인 몇개 산정하고 식을 도출해내는 식으로 구함)
		    if (totalLineCnt % (stopLink*toCnt) !=0){
		    	lastPage_firstLinkNum = ((int)(totalLineCnt/(stopLink*toCnt)) *stopLink)+1;
		    }
		    else{ //나누어 떨어졌을때 페이지의 첫 링크
		    	lastPage_firstLinkNum = ((int)(totalLineCnt/(stopLink*toCnt)) *stopLink)-4;
		    }
		    
		    //최종 마지막 링크 번호 구하기
		    if(totalLineCnt % toCnt ==0) finishLink = totalLineCnt/toCnt;
		    else finishLink = totalLineCnt/toCnt + 1;
		    
//	 	    lastPage_firstLinkNum = ((int)(totalLineCnt/200) *10)+1;   
//	 	    if (totalLineCnt == 200) lastPage_firstLinkNum = 1;
		
		    //이전페이지 갈 때 구현
		    previousPage_firstLinkNum = firstLinkNum-stopLink;
		  	//이전 페이지가 음수 찍히지 않도록
		    if( previousPage_firstLinkNum <= 0 ) previousPage_firstLinkNum =1; 
		
		    //다음페이지 갈 때 구현
		    nextPage_firstLinkNum = firstLinkNum+stopLink;
		  	//다음페이지가 무수히 나오지 않도록
		  	if(nextPage_firstLinkNum >= lastPage_firstLinkNum +stopLink){
	            nextPage_firstLinkNum = lastPage_firstLinkNum; 
	        }
			
		//}catch (Exception e){ 
	
      out.write("\r\n");
      out.write("<!-- \t\t\t<script >window.location=\"/Gongji_project\";</script> 메서드를 폼으로 잡으면 이 처리 없어도 됨 -->\r\n");
      out.write("\t\t\t\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=wrap>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr><th class=\"collum1\">번호</th><th class=\"collum2\">제목</th>\r\n");
      out.write("\t\t\t<th class=\"collum4\">조회수</th><th class=\"collum3\">등록일</th></tr>\t\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t\t");
 while(rset.next()){ 
					LineCnt++;
	                if(LineCnt < fromNum) {continue;} 
	                //continue continue를 만나게 되면 다음을 수행 안하고 다음 반복문으로 뛴다
	                if(LineCnt >= fromNum+toCnt) {break;}
				
					if(sdf.format(calt.getTime()).equals(rset.getString(3))) {
						title = rset.getString(2)+"[new]";
					}else {
						title = rset.getString(2);
					}
					
					if(rset.getInt(6) != 0){
						//StringBuffer sb = new StringBuffer();
						StringBuilder sb = new StringBuilder();
						
						for(int i=0; i < rset.getInt(6); i++) {
							sb.append("-");
						}
						
						title = sb.toString()+">[re]"+title;
					}
				
				
			
      out.write("\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td class=\"collum1\">");
      out.print(rset.getInt(1) );
      out.write("</td>\t\r\n");
      out.write("\t\t\t\t\t<td class=\"collum2\">\r\n");
      out.write("\t\t\t\t\t\t<a href=\"?contentPage=gongji_view.jsp?keyId=");
      out.print(rset.getInt(1));
      out.write('"');
      out.write('>');
      out.print(title );
      out.write("</a>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t<td class=\"collum4\">");
      out.print(rset.getString(5) );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td class=\"collum3\">");
      out.print(rset.getString(3) );
      out.write("</td>\r\n");
      out.write("\t\t\t\t</tr>\t\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<!-- 페이징 출력 -->\r\n");
      out.write("\r\n");
      out.write("    <table id=\"linkTable\" align=\"center\">\r\n");
      out.write("        <tr id=\"Ptr\">\r\n");
      out.write("\t       ");
      out.write("\r\n");
      out.write("\t       <td>\r\n");
      out.write("\t           <a href=\"?contentPage=gongji_list.jsp?sendFirstLink=");
      out.print(firstPage_firstLinkNum);
      out.write("\">&lt&lt</a>\r\n");
      out.write("\t       </td>\r\n");
      out.write("\t       ");
      out.write("\r\n");
      out.write("\t       <td>\r\n");
      out.write("\t           <a href=\"?contentPage=gongji_list.jsp?sendFirstLink=");
      out.print(previousPage_firstLinkNum);
      out.write("&from=");
      out.print(previousPage_firstLinkNum*toCnt-(toCnt-1));
      out.write("\">&lt</a>\r\n");
      out.write("\t       </td>\r\n");
      out.write("     \r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");

                for(int i=firstLinkNum; i<firstLinkNum+stopLink ; i++) {
                    if ( (i*toCnt-(toCnt-1)) > totalLineCnt) break; //데이터가 없는 링크가 만들어 지지 않도록
                    out.print("<td>");    
                    //링크의 번호에 따라 조회할 데이터의 번호가 바뀜 & 바뀐 번호를 던져줌
                    out.print("<a href=?contentPage=gongji_list.jsp?sendFirstLink="+firstLinkNum+"&from="+(i*toCnt-(toCnt-1))+">"+i+"p</a>");   
                    out.print("</td>");                    
                }
            
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            <td>\r\n");
      out.write("                <a href=\"?contentPage=gongji_list.jsp?sendFirstLink=");
      out.print(nextPage_firstLinkNum);
      out.write("&from=");
      out.print(nextPage_firstLinkNum*toCnt-(toCnt-1));
      out.write("\">&gt</a>\r\n");
      out.write("            </td>\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            <td>\r\n");
      out.write("                <a href=\"?contentPage=gongji_list.jsp?sendFirstLink=");
      out.print(lastPage_firstLinkNum);
      out.write("&from=");
      out.print(finishLink*toCnt-(toCnt-1));
      out.write("\">&gt&gt</a>\r\n");
      out.write("            </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<div id=divButton>\t\r\n");
      out.write("\t\t<form action=\"?contentPage=gongji_insert.jsp\" method=\"POST\">\r\n");
      out.write("\t\t\t\t\t<input type=\"submit\" value=\"신규\">\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t");
	
		rset.close();
	    stmt.close();
	    udb.close();
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
