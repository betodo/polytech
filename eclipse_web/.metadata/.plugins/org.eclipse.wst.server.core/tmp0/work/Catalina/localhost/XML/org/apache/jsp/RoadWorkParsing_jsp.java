/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2019-08-16 02:53:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.ParseException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.util.EntityUtils;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.params.HttpParams;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import java.io.*;
import java.text.*;
import java.util.*;
import java.sql.*;
import javax.servlet.*;
import javax.sql.*;
import javax.naming.*;
import javax.xml.parsers.*;
import org.w3c.dom.*;

public final class RoadWorkParsing_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

// 함수 정의 1) getThreadSafeClient() : 마치 브라우져로 조회하여 세션이 유지되는 효과를 얻음
	// 함수 정의 2) goXML(String getURL) : 해당 유알엘 주소를 입력하여 xml파일을 리턴 받는 함수

	DefaultHttpClient client;//일단 텅빈고객선언

	// 	HttpClient 재사용 관련 서버 통신시 세션을 유지하기 위함...HttpClient 4.5.2->https://hc.apache.org/downloads.cqi 

	public DefaultHttpClient getThreadSafeClient() { //텅빈고객을 쓰레드로 처리하자

		if (client != null) //고객이 있으면
			return client; //그 고객을 내뱉음

		//고객이 없으면
		client = new DefaultHttpClient();
		ClientConnectionManager mgr = client.getConnectionManager();
		HttpParams params = client.getParams();

		client = new DefaultHttpClient(new ThreadSafeClientConnManager(params, mgr.getSchemeRegistry()), params);

		return client;//완전해진 새 고객을 내 뱉음

	}

	public String goXML(String getURL) { //xml파일(웹에 띄우기)

		String Result = null;//xml웹 접근 결과선언

		//세션유지 체크
		HttpClient client = getThreadSafeClient(); //고객정의 함수로 고객을 얻는다
		HttpConnectionParams.setConnectionTimeout(client.getParams(), 1000000);//고객이랑 얼마나 연결되 있을지 옵션설정
		HttpConnectionParams.setSoTimeout(client.getParams(), 1000000);
		HttpPost post = new HttpPost(getURL); //값을 전달하는 방식 정해줌 url얻어서 //역시 옵션 관련됨

		//http값전달 방식을 post로하면 namevaluefair란 리스트를 통해 전달
		List<NameValuePair> nameValuePair = new ArrayList<NameValuePair>();

		// 		//if false니까 죽은 코드임
		// 		if (false) { //여기가 파라메터 전달하는 곳(로그인을 했을때 여기서 처리를 한다는 것을 보여주는  학습용 소스)
		// 			nameValuePair.add(new BasicNameValuePair("input1", "kopo11"));//지금은 로그인 처리 안하닌까 안쓰임
		// 		}

		try {
			//고객의 요청을 Entity에 담음
			post.setEntity(new UrlEncodedFormEntity(nameValuePair));
			HttpResponse responsePost = null;//http대답선언

			//서버의 응답을 저장(고객의 요청의 결과 )
			responsePost = client.execute(post);
			//http가 서버결과를 얻음
			HttpEntity resEntity = responsePost.getEntity();

			if (resEntity != null) { //서버결과가 있으면 결과를 스트링으로
				Result = EntityUtils.toString(resEntity).trim();

			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {

		}
		return Result;
	}

	///변수선언///
	//통제할 변수 선언
	String CoordType = ""; //좌표타입 @
	int DataCount = 0; //공사정보 개수 @
	double CoordX = 0; //경도좌표 @ //lng
	double CoordY = 0; //위도좌표 @ //lat

	String type = ""; //도로정보 (its : 국도 / ex : 고속도로 / police : 경찰청) @
	String EventId = ""; //공사 고유 식별번호 @
	//String EventType = ""; //공사정보유형 @ 유용한 정보 아님 0만나옴
	String LanesBlockType = ""; //공사로 인한 차로 차단 방법 @//0: 통제없음, 1: 갓길통제, 2: 차로 부분통제, 3: 전면통제, 4:우회통행. 5:양방향교차통행
	String LanesBlocked = "";//공사로 인해 차단된 차로 수 @
	String EventStartDay = "";//공사 시작일 @
	String EventEndDay = "";//공사 종료일 @
	String EventStartTime = ""; //공사 실제 개시 시간 @
	String EventEndTime = ""; //공사 실제 종료 시간 @
	String EventStatusMsg = ""; //공사 상황정보 메시지 @
	int ExpectedCnt = 0; //우회정보개수 @
	String ExpectedDetourMsg = ""; //우회정보 메시지 @
	String EventDirection = ""; //진행방향 
	
	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("org.w3c.dom");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.naming");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.xml.parsers");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.apache.http.impl.client.DefaultHttpClient");
    _jspx_imports_classes.add("org.apache.http.message.BasicNameValuePair");
    _jspx_imports_classes.add("org.apache.http.client.methods.HttpPost");
    _jspx_imports_classes.add("org.apache.http.ParseException");
    _jspx_imports_classes.add("org.apache.http.client.entity.UrlEncodedFormEntity");
    _jspx_imports_classes.add("org.apache.http.conn.ClientConnectionManager");
    _jspx_imports_classes.add("org.apache.http.params.HttpConnectionParams");
    _jspx_imports_classes.add("org.apache.http.HttpEntity");
    _jspx_imports_classes.add("org.apache.http.util.EntityUtils");
    _jspx_imports_classes.add("org.apache.http.client.HttpClient");
    _jspx_imports_classes.add("org.apache.http.client.methods.HttpGet");
    _jspx_imports_classes.add("org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager");
    _jspx_imports_classes.add("org.apache.http.params.HttpParams");
    _jspx_imports_classes.add("org.apache.http.HttpResponse");
    _jspx_imports_classes.add("org.apache.http.NameValuePair");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 아파치 임포트 *하면 안들어 오는게 있을수 있어서 다 써줌 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>교통, 도로공사 정보</title>\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("<link href=\"weather.css\" type=\"text/css\" rel=\"stylesheet\"><!-- 테이블 스타일 -->\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("\thtml, body {\r\n");
      out.write("\t\theight: 100%;\r\n");
      out.write("\t\tmargin: 0;\r\n");
      out.write("\t\tpadding: 0;\r\n");
      out.write("\t}\r\n");
      out.write("\t#mid_head{\r\n");
      out.write("\t\ttext-align:center;\r\n");
      out.write("\t}\r\n");
      out.write("\t#map {\r\n");
      out.write("\t\tmargin-left:25%;\r\n");
      out.write("\t\theight: 40%;\r\n");
      out.write("\t\twidth: 50%;\t\r\n");
      out.write("\t}\r\n");
      out.write("\t#wrapTB{\r\n");
      out.write("\t\theight:59%;\r\n");
      out.write("\t\toverflow:auto;\r\n");
      out.write("\t}\r\n");
      out.write("\tspan{\r\n");
      out.write("\t\tmargin-right:4%;\r\n");
      out.write("\t\tmargin-left:4%;\r\n");
      out.write("\t}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t");

		///파싱준비///
		//rul주소에 공백 있으면 url 신택스에러 뜬다
		String url = "http://openapi.its.go.kr:8082/api/NEventIdentity?key=1498271446332&ReqType=2&MinX=127.100000&MaxX=128.890000&MinY=34.100000&MaxY=39.100000&type=its";
		String ret = goXML(url);//xml파일 결과 받기
		//out.print(ret);

		//파싱준비
		//DocumentBuilderFactory 객체생성
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		//DocumentBuilder 객체생성
		DocumentBuilder builder = factory.newDocumentBuilder();

		ByteArrayInputStream is = new ByteArrayInputStream(ret.getBytes("utf-8"));//바이트로 읽는 인풋 스트림 이용
		//builder를 이용하여 xml 파싱 -> Document객체 생성
		Document doc = builder.parse(is);

		Element root = doc.getDocumentElement();

	
      out.write("\r\n");
      out.write("\t<h1 align=\"center\">도로 공사 정보</h1>\r\n");
      out.write("\t<!-- 지도 출력할 위치 -->\r\n");
      out.write("\t<div id=\"map\" align=\"center\"></div>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<!-- 간단정보 -->\r\n");
      out.write("\t<div id=mid_head><span>현재 공사 수 : ");
      out.print(DataCount);
      out.write("건</span><span><button onclick='initMap()'>전체지도보기</button></span></div>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<!-- 실제 전 정보 -->\r\n");
      out.write("\t<div id=wrapTB>\r\n");
      out.write("\t<table id=\"customers\">\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>경도</th>\r\n");
      out.write("\t\t\t\t<th>위도</th>\r\n");
      out.write("\t\t\t\t<th>도로<br>정보</th>\r\n");
      out.write("\t\t\t\t<th>공사<br>식별번호</th>\r\n");
      out.write("<!-- \t\t\t\t<th>공사 정보유형</th> -->\r\n");
      out.write("\t\t\t\t<th>공사<br>시작일</th>\r\n");
      out.write("\t\t\t\t<th>공사<br>종료일</th>\r\n");
      out.write("\t\t\t\t<th>공사<br>개시시간</th>\r\n");
      out.write("\t\t\t\t<th>공사<br>종료시간</th>\r\n");
      out.write("\t\t\t\t<th>공사상황</th>\r\n");
      out.write("\t\t\t\t<th>차단방법</th>\r\n");
      out.write("\t\t\t\t<th>차단<br>차로수</th>\r\n");
      out.write("\t\t\t\t<th>우회<br>정보수</th>\r\n");
      out.write("\t\t\t\t<th>우회<br>정보</th>\r\n");
      out.write("\t\t\t\t<th>진행방향</th>\r\n");
      out.write("\t\t\t\t<th>지도보기</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t\t");

				//공사수 갖고 오기(xml문서에서 한개의 정보만 있다.)
				NodeList tag_datacount = doc.getElementsByTagName("datacount");
				DataCount = Integer.parseInt(tag_datacount.item(0).getFirstChild().getNodeValue());

				//각 data태그의 하위태그들을 뽑기위해 일단 data태그를 가져온다
				NodeList tag_001 = doc.getElementsByTagName("data");

				//차단차로수 계산하기위한 변수
				int LanesBlockedCnt = 0; //1000으로 나옴 그냥 간단하게 숫자로만 표현하려 함 그거 계산 위한 변수
				char c = '1';
			
				//맵크러스터에 여러값 던지기 위해 배열 선언
				StringBuilder sb = new StringBuilder(); 
				
				for (int i = 0; i < tag_001.getLength(); i++) {
					
					//각 data태그들 하나의 엘리먼트로 선언해서 하위 태그들 접근
					Element elmt = (Element) tag_001.item(i);

					//경도 위도 정보는 항상 있어어 트라이 캐치 안씀
					CoordX = Double.parseDouble(elmt.getElementsByTagName("coordx").item(0).getFirstChild().getNodeValue()); //xml의 name tag
					CoordY = Double.parseDouble(elmt.getElementsByTagName("coordy").item(0).getFirstChild().getNodeValue()); //xml의 tag_studentid tag

					try { type = elmt.getElementsByTagName("type").item(0).getFirstChild().getNodeValue(); 
					} catch (Exception e) {}
					try { EventId = elmt.getElementsByTagName("eventid").item(0).getFirstChild().getNodeValue(); 
					} catch (Exception e) {}
// 					try { EventType = elmt.getElementsByTagName("eventtype").item(0).getFirstChild().getNodeValue(); 
// 					} catch (Exception e) {}
					try { EventStartDay = elmt.getElementsByTagName("eventstartday").item(0).getFirstChild().getNodeValue();
					} catch (Exception e) {}
					try { EventEndDay = elmt.getElementsByTagName("eventendday").item(0).getFirstChild().getNodeValue();
					} catch (Exception e) {}
					try { EventStartTime = elmt.getElementsByTagName("eventstarttime").item(0).getFirstChild().getNodeValue();
					} catch (Exception e) {}
					try { EventEndTime = elmt.getElementsByTagName("eventendtime").item(0).getFirstChild().getNodeValue();
					} catch (Exception e) {}
					try { EventStatusMsg = elmt.getElementsByTagName("eventstatusmsg").item(0).getFirstChild().getNodeValue();
					} catch (Exception e) {}
					try { LanesBlockType = elmt.getElementsByTagName("lanesblocktype").item(0).getFirstChild().getNodeValue();
					} catch (Exception e) {}
					try { LanesBlocked = elmt.getElementsByTagName("lanesblocked").item(0).getFirstChild().getNodeValue();
					} catch (Exception e) {}
					try { ExpectedCnt = Integer.parseInt(elmt.getElementsByTagName("expectedcnt").item(0).getFirstChild().getNodeValue());
					} catch (Exception e) {}
					try { ExpectedDetourMsg = elmt.getElementsByTagName("expecteddetourmsg").item(0).getFirstChild().getNodeValue();
					} catch (Exception e) {}
					try { EventDirection = elmt.getElementsByTagName("eventdirection").item(0).getFirstChild().getNodeValue();
					} catch (Exception e) {}
					
					
					//출력용 데이터 처리
					//도로정보 (its : 국도 / ex : 고속도로 / police : 경찰청) @
					switch(type){  
					case "its" : type = "국도" ; break;
					case "ex" : type = "고속도로"; break;
					case "police" : type = "경찰청";  break;
					}
					//공사로 인한 차로 차단 방법 //( 0 : 통제없음 / 1 : 갓길통제/ 2 : 차로부분통제 / 3 : 전면통제 )
					switch(LanesBlockType){  
					case "0" : LanesBlockType = "통제없음" ; break;
					case "1" : LanesBlockType = "갓길통제"; break;
					case "2" : LanesBlockType = "차로부분통제";  break;
					case "3" : LanesBlockType = "전면통제";  break;
					}
					
					//차단 차선이 100000으로 1차선차단일 경우 1로 나옴 
					//컬럼명과 맞게 차단차선수로만 표시하기
					for(int k=0; k < LanesBlocked.length(); k++ ){
						if(LanesBlocked.charAt(k) == c ){
							LanesBlockedCnt++;
						}
					}
				
					//지도 마커 찍을 배열 만들기(스트링형으로 만들어서 자바스크립[]에 넣어줌)
					sb.append("{lat: "+CoordY+", lng: "+CoordX+"}");
					if( i != tag_001.getLength()-1){
						sb.append(",");
					}
					
						
			
      out.write("\r\n");
      out.write("\t\t\t<!-- 실 데이터 출력 -->\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(Math.round(CoordX*10000000)/10000000.0);
      out.write("</td><!-- 소수점7자리까지만 -->\r\n");
      out.write("\t\t\t\t<td>");
      out.print(Math.round(CoordY*10000000)/10000000.0);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(type);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(EventId);
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<td>");
      out.print(EventStartDay);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(EventEndDay);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(EventStartTime);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(EventEndTime);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(EventStatusMsg);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(LanesBlockType);
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<td>");
      out.print(LanesBlockedCnt);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(ExpectedCnt);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(ExpectedDetourMsg);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(EventDirection);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<!-- 클릭시 지도가 뜰수 있도록 매개변수로 함수 호출 -->\r\n");
      out.write("\t\t\t\t<td><button onclick='oneMarkerMap(");
      out.print(CoordY);
      out.write(',');
      out.print(CoordX);
      out.write(")'>지도보기</button></td>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t");

					LanesBlockedCnt=0;//재사용(계산)을 위한 초기화
				}
			
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("<script>\r\n");
      out.write("\tvar lo = [");
      out.print(sb.toString());
      out.write("];    \r\n");
      out.write("\tvar zo = 7;                       \r\n");
      out.write("\tvar ce = {lat: 36.5, lng: 127.8}; \r\n");
      out.write("\t                                  \r\n");
      out.write("\tfunction oneMarkerMap(latt, lngg){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tlo = [{lat: latt, lng: lngg}];\r\n");
      out.write("\t\tzo = 12;\r\n");
      out.write("\t\tce = {lat: latt, lng: lngg};\r\n");
      out.write("\t\tinitMap();\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("/* 마커하나짜리(공사1개) 구글맵api사용 */\r\n");
      out.write("// \tfunction initMap2(latt,lngg) {\r\n");
      out.write("\t  \r\n");
      out.write("// \t  // The location of Uluru\r\n");
      out.write("// \t  var uluru = {lat: latt, lng: lngg};\r\n");
      out.write("// \t  // The map, centered at Uluru\r\n");
      out.write("// \t  var map = new google.maps.Map(\r\n");
      out.write("// \t      document.getElementById('map'), {zoom: 12, center: uluru});\r\n");
      out.write("// \t  // The marker, positioned at Uluru\r\n");
      out.write("// \t  var marker = new google.maps.Marker({position: uluru, map: map});\r\n");
      out.write("// \t}\r\n");
      out.write("\r\n");
      out.write("/* 마커크러스터(공사여러개) */\t\r\n");
      out.write("     function initMap() {\r\n");
      out.write("\t\tvar locations  = lo;\r\n");
      out.write("    \t //마커의 위치를 배열로 넣는다\r\n");
      out.write("       var map = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("//          zoom: 7,\r\n");
      out.write("//          center: {lat: 36.5, lng: 127.8}\r\n");
      out.write("         zoom: zo,\r\n");
      out.write("         center: ce\r\n");
      out.write("       });\r\n");
      out.write("\r\n");
      out.write("       // Create an array of alphabetical characters used to label the markers.\r\n");
      out.write("       var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n");
      out.write("\r\n");
      out.write("       // Add some markers to the map.\r\n");
      out.write("       // Note: The code uses the JavaScript Array.prototype.map() method to\r\n");
      out.write("       // create an array of markers based on a given \"locations\" array.\r\n");
      out.write("       // The map() method here has nothing to do with the Google Maps API.\r\n");
      out.write("       var markers = locations.map(function(location, i) {\r\n");
      out.write("         return new google.maps.Marker({\r\n");
      out.write("           position: location,\r\n");
      out.write("           label: labels[i % labels.length]\r\n");
      out.write("         });\r\n");
      out.write("       });\r\n");
      out.write("\r\n");
      out.write("       // Add a marker clusterer to manage the markers.\r\n");
      out.write("       var markerCluster = new MarkerClusterer(map, markers,\r\n");
      out.write("           {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});\r\n");
      out.write("     }\r\n");
      out.write("         \r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("</script>\r\n");
      out.write("    \r\n");
      out.write("<script\r\n");
      out.write("\tsrc=\"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js\">\r\n");
      out.write("</script>\r\n");
      out.write("<script async defer\r\n");
      out.write("   src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb73w2PJumWZ-xgrt3QAnXbSMGfumvmiM&callback=initMap\">\r\n");
      out.write("</script>\r\n");
      out.write("    \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
