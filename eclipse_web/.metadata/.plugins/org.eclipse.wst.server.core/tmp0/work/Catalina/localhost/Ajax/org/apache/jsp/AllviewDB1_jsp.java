/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2019-08-14 01:20:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.sql.*;
import java.io.*;
import java.util.ArrayList;

public final class AllviewDB1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<meta http-equiv=\"Content-Type\"  content=\"text/html;charset=utf-8\"/>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <style>\r\n");
      out.write("        #dataTable {\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            margin-bottom: 1em;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        .dataTableTD {\r\n");
      out.write("            border: 1px solid;\r\n");
      out.write("        }\r\n");
      out.write("        th {\r\n");
      out.write("            width: 10em;\r\n");
      out.write("            height: 2em;\r\n");
      out.write("            border: 1px solid;\r\n");
      out.write("            background-color:aliceblue;\r\n");
      out.write("        }\r\n");
      out.write("        #linkTable{\r\n");
      out.write("            border: 0em;\r\n");
      out.write("        }\r\n");
      out.write("        a {\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            margin-left: 1em;\r\n");
      out.write("            margin-right: 1em;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("    </style>\r\n");
      out.write("    <title>examtable에 데이터를 모두 보여주는 jsp파일</title>\r\n");
      out.write("    ");

        //String title = "실습 데이터 입력 ok";
        //try{
        //
        //}catch(Exception e){
        //    
        //}
        Connection conn = null; //얘네 셋을 트라이캐치 밖에선 선언을 안해주면
        Statement stmt =null; //나중에 바디에서 써먹을 수가 없다(전,지역변수 때문에)
        ResultSet rset = null;
        
            //드라이버
            Class.forName("com.mysql.jdbc.Driver");
            //out.println("드라이버 호출 성공<br>");
            //String ip = "192.168.23.96";
            String ip = "localhost";//서버(우분투)에서 db에 외부로 나갔다 가지 않고 바로 접근 하도록 localhost로 해준다
            String port = ":3306/";
            String dbname = "song";
            //String dbname = "song?useSSL=false";
            String dbID = "root";
            String dbPW = "1234";

            //커넥션
            conn = DriverManager.getConnection("jdbc:mysql://" + ip + port + dbname, dbID, dbPW);
            //out.println("커넥션 연결 성공<br>");

            //쿼리
            stmt = conn.createStatement();
            rset = stmt.executeQuery("SELECT NAME,studentid,kor,eng,mat,(kor+eng+mat),ROUND(((kor+eng+mat)/3),2) FROM examtable;");

        
		
    
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("    ");

    //선언
        //테이블 라인 조회 변수
        int LineCnt = 0; //행 번호
        int fromNum =0; //몇번부터
        int toCnt = 10; //몇개를
        String fromTemp;//던지는 값을 일시적으로 받을 변수

        //페이징 처리 변수
        final int firstPage_firstLinkNum=1; //제일 첫p의 첫 링크 번호
        int firstLinkNum = 1;//각 p의 첫 링크 번호
        int totalLineCnt = 0;//데이터의 전체 라인 수(마지막 P 구현에 필요)
        int previousPage_firstLinkNum = 0;//이전 p 갈 때 필요 변수
        int nextPage_firstLinkNum = 0;//다음 p 갈 때 필요 변수
        int lastPage_firstLinkNum = 0;//막p 첫 링크 번호

        //값 받기
        fromTemp =request.getParameter("from"); 

        //최초 받은 값이 없고 있고 처리
        if(fromTemp == null) {
            fromNum =1; //제일 처음
        }else { 
            fromNum = Integer.parseInt(fromTemp);

        }

        //데이터 전체라인 구하기
        rset.last();
        totalLineCnt=rset.getRow();
        rset.beforeFirst();

        //하이퍼링크가 던지는 값(각 페이지의 첫번째 링크 숫자) 받기
        String getFirstLink = request.getParameter("sendFirstLink");
        if (getFirstLink != null){
            firstLinkNum = Integer.parseInt(getFirstLink);
        }
         //마지막p 첫 링크 번호 구하기 (총라인 몇개 산정하고 식을 도출해내는 식으로 구함)
        lastPage_firstLinkNum = ((int)(totalLineCnt/100) *10)+1;   
        if (totalLineCnt == 100) lastPage_firstLinkNum = 1;

         //이전페이지 갈 때 구현
        previousPage_firstLinkNum = firstLinkNum-10;

        //다음페이지 갈 때 구현
        nextPage_firstLinkNum = firstLinkNum+10;
        
    
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("    ");

        //총점,평균은 쿼리로 처리 
        //총점을 비교하여 등수부여를 위해 총점을 어레이 리스트에 저장
        ArrayList<Integer> total = new ArrayList<>(); //비교할 총점
        ArrayList<Integer> rank = new ArrayList<>(); //부여할 등수
        int rank_index =0; //부여한 등수를 출력할때 필요한 등수arrayList의 인덱스

        rank_index = fromNum-1;//페이징 처리때문에 계산 
        
        //등수부여를 위해 총점 배열에 값 저장
        while(rset.next()){
            total.add(rset.getInt(6));
            rank.add(1);
        }

        //총점을 비교하여 등수 부여, 저장
        for(int i=0; i < rank.size(); i++){
            rank.set(i,1);
            for(int j =0; j < total.size(); j++){
                if(total.get(i) < total.get(j)){
                    rank.set(i, rank.get(i)+1);
                }
            }
        }

        rset.beforeFirst();//최종출력을 위해 rset을 돌려놈
    
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    <h1>조회</h1>\r\n");
      out.write("    <table id=\"dataTable\">\r\n");
      out.write("        <thead>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th>이름</th><th>학번</th>\r\n");
      out.write("                <th>국어</th><th>영여</th><th>수학</th>\r\n");
      out.write("                <th>합계</th><th>평균</th><th>등수</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("    ");

        while(rset.next()) {
            LineCnt++;
            if(LineCnt < fromNum) {continue;} 
            if(LineCnt >= (fromNum+toCnt) ) {break;}
    
      out.write("  \r\n");
      out.write("            <tr>\r\n");
      out.write("                <td class=\"dataTableTD\"><a href=\"oneviewDB.jsp?sended_studentID=");
      out.print(rset.getInt(2));
      out.write("&sended_studentName=");
      out.print(rset.getString(1));
      out.write('"');
      out.write('>');
      out.print(rset.getString(1));
      out.write("</a></td>\r\n");
      out.write("                <td class=\"dataTableTD\">");
      out.print(rset.getInt(2));
      out.write("</td>\r\n");
      out.write("                <td class=\"dataTableTD\">");
      out.print(rset.getInt(3));
      out.write("</td>\r\n");
      out.write("                <td class=\"dataTableTD\">");
      out.print(rset.getInt(4));
      out.write("</td>\r\n");
      out.write("                <td class=\"dataTableTD\">");
      out.print(rset.getInt(5));
      out.write("</td>\r\n");
      out.write("                <td class=\"dataTableTD\">");
      out.print(rset.getInt(6));
      out.write("</td>\r\n");
      out.write("                <td class=\"dataTableTD\">");
      out.print(rset.getDouble(7));
      out.write("</td>\r\n");
      out.write("                <td class=\"dataTableTD\">");
      out.print(rank.get(rank_index));
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("    ");
    
            rank_index++;//인덱스를 페이지 링크 누를때 던져서 변화 시켜야함
        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("    <!-- 페이징 출력 -->\r\n");
      out.write("    <table id=\"linkTable\" align=\"center\">\r\n");
      out.write("        <tr id=\"Ptr\">\r\n");
      out.write("            ");

            if(firstLinkNum !=1){ //첫 페이지에선 이전페이지 가는 링크 안나오도록
            
      out.write("\r\n");
      out.write("                ");
      out.write("\r\n");
      out.write("                <td>\r\n");
      out.write("                    <a href=\"AllviewDB.jsp?sendFirstLink=");
      out.print(firstPage_firstLinkNum);
      out.write("\">&lt&lt</a>\r\n");
      out.write("                </td>\r\n");
      out.write("                ");
      out.write("\r\n");
      out.write("                <td>\r\n");
      out.write("                    <a href=\"AllviewDB.jsp?sendFirstLink=");
      out.print(previousPage_firstLinkNum);
      out.write("&from=");
      out.print(previousPage_firstLinkNum*10-9);
      out.write("&cnt=10\">&lt</a>\r\n");
      out.write("                </td>\r\n");
      out.write("            ");
    
            }
            
      out.write("\r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            ");
 
                for(int i=firstLinkNum; i<firstLinkNum+10 ; i++) {
                    if ( (i*10-9) > totalLineCnt) break; //데이터가 없는 링크가 만들어 지지 않도록
                    out.print("<td>");    
                    //링크의 번호에 따라 조회할 데이터의 번호가 바뀜 & 바뀐 번호를 던져줌
                    out.print("<a href=AllviewDB.jsp?sendFirstLink="+firstLinkNum+"&from="+(i*10-9)+">"+i+"p</a>");   
                    out.print("</td>");                    
                }
            
      out.write("\r\n");
      out.write("            ");

            if( (firstLinkNum+9)*10 < totalLineCnt ){ //마지막페이지에서 다음페이지 가는 링크 안나오도록
            
      out.write("\r\n");
      out.write("                ");
      out.write("\r\n");
      out.write("                <td>\r\n");
      out.write("                    <a href=\"AllviewDB.jsp?sendFirstLink=");
      out.print(nextPage_firstLinkNum);
      out.write("&from=");
      out.print(nextPage_firstLinkNum*10-9);
      out.write("\">&gt</a>\r\n");
      out.write("                </td>\r\n");
      out.write("                ");
      out.write("\r\n");
      out.write("                <td>\r\n");
      out.write("                    <a href=\"AllviewDB.jsp?sendFirstLink=");
      out.print(lastPage_firstLinkNum);
      out.write("&from=");
      out.print(lastPage_firstLinkNum*10-9);
      out.write("\">&gt&gt</a>\r\n");
      out.write("                </td>\r\n");
      out.write("            ");
    
            }
            
      out.write("\r\n");
      out.write("        </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("    ");

        //rset2.close();//데이터 안잡아 먹도록 쓰고나면 닫자
        //stmt2.close();
        rset.close();//데이터 안잡아 먹도록 쓰고나면 닫자
        stmt.close();
        conn.close(); 
    
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
