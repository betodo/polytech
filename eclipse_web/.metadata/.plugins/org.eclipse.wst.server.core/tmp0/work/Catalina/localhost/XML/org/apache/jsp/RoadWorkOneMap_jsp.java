/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2019-08-13 11:45:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.ArrayList;

public final class RoadWorkOneMap_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	String lngTemp = request.getParameter("lng");
	double lng = Double.parseDouble(new String(lngTemp.getBytes("8859_1"), "utf-8")); //경도

	String latTemp = request.getParameter("lat");
	double lat = Double.parseDouble(new String(latTemp.getBytes("8859_1"), "utf-8")); //위도

	out.print(lng + " / " + lat);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>Marker Clustering</title>\r\n");
      out.write("<style>\r\n");
      out.write("/* Always set the map height explicitly to define the size of the div\r\n");
      out.write("       * element that contains the map. */\r\n");
      out.write("#map {\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("}\r\n");
      out.write("/* Optional: Makes the sample page fill the window. */\r\n");
      out.write("html, body {\r\n");
      out.write("\theight: 100%;\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"map\"></div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\r\n");
      out.write("      function initMap() {\r\n");
      out.write("\r\n");
      out.write("        var map = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("          zoom: 7.5,\r\n");
      out.write("          center: {lat: ");
      out.print(lat);
      out.write(", lng: ");
      out.print(lng);
      out.write("}\r\n");
      out.write("        \r\n");
      out.write("//           zoom: 3,\r\n");
      out.write("//           center: {lat: -28.024, lng: 140.887}\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Create an array of alphabetical characters used to label the markers.\r\n");
      out.write("        var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n");
      out.write("\r\n");
      out.write("        // Add some markers to the map.\r\n");
      out.write("        // Note: The code uses the JavaScript Array.prototype.map() method to\r\n");
      out.write("        // create an array of markers based on a given \"locations\" array.\r\n");
      out.write("        // The map() method here has nothing to do with the Google Maps API.\r\n");
      out.write("        var markers = locations.map(function(location, i) {\r\n");
      out.write("          return new google.maps.Marker({\r\n");
      out.write("            position: location,\r\n");
      out.write("            label: labels[i % labels.length]\r\n");
      out.write("          });\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Add a marker clusterer to manage the markers.\r\n");
      out.write("        var markerCluster = new MarkerClusterer(map, markers,\r\n");
      out.write("            {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});\r\n");
      out.write("      }\r\n");
      out.write("      var locations = [\r\n");
      out.write("        {lat: ");
      out.print(lat);
      out.write(", lng: ");
      out.print(lng);
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//         {lat: -31.563910, lng: 147.154312},\r\n");
      out.write("//         {lat: -33.718234, lng: 150.363181},\r\n");
      out.write("//         {lat: -33.727111, lng: 150.371124},\r\n");
      out.write("//         {lat: -33.848588, lng: 151.209834},\r\n");
      out.write("//         {lat: -33.851702, lng: 151.216968},\r\n");
      out.write("//         {lat: -34.671264, lng: 150.863657},\r\n");
      out.write("//         {lat: -35.304724, lng: 148.662905},\r\n");
      out.write("//         {lat: -36.817685, lng: 175.699196},\r\n");
      out.write("//         {lat: -36.828611, lng: 175.790222},\r\n");
      out.write("//         {lat: -37.750000, lng: 145.116667},\r\n");
      out.write("//         {lat: -37.759859, lng: 145.128708},\r\n");
      out.write("//         {lat: -37.765015, lng: 145.133858},\r\n");
      out.write("//         {lat: -37.770104, lng: 145.143299},\r\n");
      out.write("//         {lat: -37.773700, lng: 145.145187},\r\n");
      out.write("//         {lat: -37.774785, lng: 145.137978},\r\n");
      out.write("//         {lat: -37.819616, lng: 144.968119},\r\n");
      out.write("//         {lat: -38.330766, lng: 144.695692},\r\n");
      out.write("//         {lat: -39.927193, lng: 175.053218},\r\n");
      out.write("//         {lat: -41.330162, lng: 174.865694},\r\n");
      out.write("//         {lat: -42.734358, lng: 147.439506},\r\n");
      out.write("//         {lat: -42.734358, lng: 147.501315},\r\n");
      out.write("//         {lat: -42.735258, lng: 147.438000},\r\n");
      out.write("//         {lat: -43.999792, lng: 170.463352}\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("      ]\r\n");
      out.write("    </script>\r\n");
      out.write("\t<script\r\n");
      out.write("\t\tsrc=\"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js\">\r\n");
      out.write("    </script>\r\n");
      out.write("\t<script async defer\r\n");
      out.write("\t\tsrc=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAb73w2PJumWZ-xgrt3QAnXbSMGfumvmiM&callback=initMap\">\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
