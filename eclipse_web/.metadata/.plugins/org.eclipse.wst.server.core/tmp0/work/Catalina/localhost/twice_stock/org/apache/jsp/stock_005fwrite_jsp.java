/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2019-07-19 04:40:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import twice_stock_pac.UseDB;
import java.io.*;
import java.util.Enumeration;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.oreilly.servlet.MultipartRequest;

public final class stock_005fwrite_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("twice_stock_pac.UseDB");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 이게 있어야 path 잡기가 가능 -->\r\n");
      out.write("\r\n");
      out.write("<!-- 파일 업로드시 필요한 import --> \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>stock_write(실제 db동작)</title>\r\n");
      out.write("</head>\r\n");
      out.write("\t");
	
		//db연결
		UseDB udb = new UseDB();
		
		//삭제 할 건지 insert할건지 동작을 결정할 변수 key
		String key = request.getParameter("key");
		//out.print(key);
	
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t");

		//stock_view.jsp에서 재고 변경으로 넘어올때
		if (key.equals("UPDATE")){ 
			//key가 업뎃이면 변경할 데이터의 키값인 id받음
			String idTemp = request.getParameter("id");
			int id = Integer.parseInt(idTemp);
			//out.print(id);
			
			//변경할 데이터 받음
			String stockCntTemp = request.getParameter("stockCnt");
			int stockCnt = Integer.parseInt(stockCntTemp);
			//out.print(stockCnt);
			//변경 메서드 실행
			udb.updateTw_stock(stockCnt, id);
	
      out.write("\t\t<!-- 결과 출력 -->\r\n");
      out.write("\t\t\t<br><h1>(주) 트와이스 재고 현황-재고수정</h1><br><br>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<h3>상품번호 [");
      out.print(id );
      out.write("]의 재고가 수정되었습니다.</h3><br>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t<!-- key가 인서트면 할 동작들 -->\r\n");
      out.write("\t<!-- stock_insert에서 넘어올때 -->\r\n");
      out.write("\t");
 } else if(key.equals("INSERT")) { 
			
			//받아와서 디비에 인서트할 변수들
			String name = "";
			int stockCnt = 0;
			String description = "";
			
			String img = "upload_imgs/"; //현재 경로에 디렉토리 만들어 줬기 때문에 잡아줌
			//String img = "";
			
			String fileName1 = "";
			String orgfileName1 = "";
			
			//파일 업로드에 필요한 경로
			//서버옵션에서 퍼블리싱 기능 해제 햇기 때문에 톰캣 경로로 안감
			//현재 만들어놓은 upload_imgs로 경로가 잡힌다.
			String uploadPath = request.getRealPath("upload_imgs"); // upload_imgs는 폴더명
			//String uploadPath = "C:\\Users\\admin\\eclipse_web\\twice_stock\\WebContent\\upload_imgs";
			//out.print(uploadPath);
			
			try {
				MultipartRequest multi = new MultipartRequest( // MultipartRequest 인스턴스 생성(cos.jar의 라이브러리)
						request, 
						uploadPath, // 파일을 저장할 디렉토리 지정
						1024 * 1024, // 첨부파일 최대 용량 설정(bite) / 10KB / 용량 초과 시 예외 발생
						"utf-8", // 인코딩 방식 지정
						new DefaultFileRenamePolicy() // 중복 파일 처리(동일한 파일명이 업로드되면 뒤에 숫자 등을 붙여 중복 회피)
				);
				
				//insert.jsp에서 보낸 값 받기
				//멀티는 한글 처리 안해도 되었다.
				name = multi.getParameter("name");
				String stockCntTemp = multi.getParameter("stockCnt");
				stockCnt = Integer.parseInt(stockCntTemp);
				
				description = multi.getParameter("description");
				
				fileName1 = multi.getFilesystemName("file1"); // name=file1의 업로드된 시스템 파일명을 구함(중복된 파일이 있으면, 중복 처리 후 파일 이름)
				orgfileName1 = multi.getOriginalFileName("file1"); // name=file1의 업로드된 원본파일 이름을 구함(중복 처리 전 이름)
				
// 				img = uploadPath +"/" + fileName1;
				//디렉토리 경로에 파일네임을 붙이면 view에서 이미지src상대경로가 완성됨
				img = img + fileName1;
				
			} catch (Exception e) {
				e.getStackTrace();
			} // 업로드 종료
				
			//삽입 메서드 실행
			udb.insertTw_stock(name, stockCnt, description, img);
	
      out.write("\r\n");
      out.write("\t\t\t<br><h1>(주) 트와이스 재고 현황-상품등록</h1><br><br>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<h3>[");
      out.print(name );
      out.write("] 상품이 등록 되었습니다.</h3><br>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t");
 } 
      out.write("\r\n");
      out.write("\t<form action=\"?contentPage=stock_list.jsp\">\r\n");
      out.write("\t\t<input type=\"submit\" value=\"목록\" id=cancle>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t");
 udb.close(); 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
