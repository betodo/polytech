/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2019-08-14 06:17:28 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.sql.*;
import java.io.*;
import java.util.ArrayList;

public final class AllviewDB_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/json; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	//모든 접근을 허용
	//클라이언트에서 접속할때 톰캣뿐 아니라 리액트도 가능하도록
	response.setHeader("Access-Control-Allow-Origin","*");	


	Connection conn = null; //얘네 셋을 트라이캐치 밖에선 선언을 안해주면
	Statement stmt = null; //나중에 바디에서 써먹을 수가 없다(전,지역변수 때문에)
	ResultSet rset = null;

	//드라이버
	Class.forName("com.mysql.jdbc.Driver");
	//out.println("드라이버 호출 성공<br>");
	//String ip = "192.168.23.96";
	String ip = "localhost";//서버(우분투)에서 db에 외부로 나갔다 가지 않고 바로 접근 하도록 localhost로 해준다
	String port = ":3306/";
	String dbname = "song?useSSL=false";
	String dbID = "root";
	String dbPW = "1234";

	//커넥션
	conn = DriverManager.getConnection("jdbc:mysql://" + ip + port + dbname, dbID, dbPW);
	//out.println("커넥션 연결 성공<br>");

	//쿼리
	stmt = conn.createStatement();
	rset = stmt.executeQuery(
			"SELECT NAME,studentid,kor,eng,mat,(kor+eng+mat),ROUND(((kor+eng+mat)/3),2) FROM examtable;");
	//sb버퍼로 만들었지만 이걸로 안만들어도 됨
	StringBuilder sb = new StringBuilder();
	
// 	sb.append("{ \"exams\" : [");
	sb.append("[");
	
	while(rset.next()){
		sb.append("{ \"name\" : \""+rset.getString(1)+"\",");
		sb.append(" \"id\" : \""+rset.getInt(2)+"\",");
		sb.append(" \"kor\" : \""+rset.getInt(3)+"\",");
		sb.append(" \"eng\" : \""+rset.getInt(4)+"\",");
		sb.append(" \"mat\" : \""+rset.getInt(5)+"\",");
		sb.append(" \"sum\" : \""+rset.getInt(6)+"\",");
		sb.append(" \"avg\" : \""+rset.getInt(7)+"\"}");
		
		if(rset.next()){
			sb.append(",");
			rset.previous();
		}
	}
	
	sb.append(" ]");
// 	sb.append(" ] }");
	//스트링빌더로 json을 만들어 출력(요청에 응답)
	out.print(sb.toString());
	
	rset.close();
	stmt.close();
	conn.close();
	

      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
